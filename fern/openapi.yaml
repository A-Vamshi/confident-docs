openapi: 3.1.0
info:
  title: Confident AI Metrics API
  version: 1.0.0

servers:
  - x-fern-server-name: Confident AI
    url: https://api.confident-ai.com/

tags:
  - name: Metric Collections
    description: Metric Collection API
    externalDocs:
      description: Learn about metric collection
  - name: Datasets
    description: Confident AI Datasets API
    externalDocs:
      description: Learn about datasets
  - name: Evaluation
    description: Run your evals using API
    externalDocs:
      description: Learn about evaluations
  - name: Tracing
    description: Run your evals using API
    externalDocs:
      description: Learn about tracing

paths:
  /v1/metric-collections:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Metric Collections
      summary: Add Collection
      operationId: createMetricCollection
      description: Creates a metric collection with the `name` and the `metricSettings` you specified.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMetricCollection"
            examples:
              Single-Turn:
                name: "Collection Name"
                multiTurn: false
                metricSettings:
                  - metric:
                      name: Answer Relevancy
                    threshold: 0.8
              Multi-Turn:
                name: "Collection Name"
                multiTurn: true
                metricSettings:
                  - metric:
                      name: Turn Relevancy
                    threshold: 0.8

      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMetricResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false
                Multi-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false

    get:
      x-fern-server-name: Confident AI
      tags:
        - Metric Collections
      summary: List Metric Collections
      operationId: listMetricCollections
      description: Lists all the available metric collections in your Confident AI project.
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMetricCollectionResponse"
              examples:
                GetMetricCollections:
                  success: true
                  data:
                    metricCollections:
                      - id: "COLLECTION-ID"
                        name: "Collection Name"
                        multiTurn: false
                        metricSettings:
                          - metric:
                              name: "Faithfulness"
                            activated: true
                            threshold: 0.5
                            includeReason: true
                            strictMode: false

  /v1/metric-collections/{id}:
    put:
      x-fern-server-name: Confident AI
      tags:
        - Metric Collections
      summary: Update Collection
      operationId: updateMetricCollection
      description: Updates a metric collection's `name` and `metricSettings`.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMetricCollection"
            examples:
              Single-Turn:
                name: "New Collection Name"
                multiTurn: false
                metricSettings:
                  - metric:
                      name: "Faithfulness"
                    threshold: 0.5
              Multi-Turn:
                name: "New Collection Name"
                multiTurn: true
                metricSettings:
                  - metric:
                      name: "Role Adherence"
                    threshold: 0.5
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMetricCollectionResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false
                Multi-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false

  /v1/datasets:
    get:
      x-fern-server-name: Confident AI
      tags:
        - Datasets
      summary: Pull Datasets
      operationId: getDatasetByAlias
      description: Retrieves a list of `Golden`s or `ConversationalGolden`s from your dataset.
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDatasetResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    datasetId: "DATASET-ID"
                    goldens:
                      - input: "How's the weather like in NYC?"
                        expectedOutput: "No idea"
                Multi-Turn:
                  success: true
                  data:
                    datasetId: "DATASET-ID"
                    conversationalGoldens:
                      - scenario: "Booking a hotel"
                        expectedOutcome: "Successfully booked"
                        userDescription: "Finds hotels in NYC"

    post:
      x-fern-server-name: Confident AI
      tags:
        - Datasets
      summary: Push Dataset
      operationId: pushDataset
      description: Pushes a list of `Golden`s or `ConversationalGolden`s to your dataset.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDatasetRequestData"
            examples:
              Single-Turn:
                alias: "my-dataset-alias"
                overwrite: true
                goldens:
                  - input: "How is the weather like in NYC?"
                    expectedOutput: "No idea"
              Multi-Turn:
                alias: "my-dataset-alias"
                overwrite: true
                conversationalGoldens:
                  - scenario: "Booking a hotel"
                    expectedOutcome: "Successfully booked"
                    userDescription: "Finds hotels in NYC"

      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrUpdateGoldenRequestData"
              examples:
                Single-Turn:
                  link: "https://app.confident-ai.com/project/<PROJECT-ID>/datasets/<DATASET-ID>"
                Multi-Turn:
                  link: "https://app.confident-ai.com/project/<PROJECT-ID>/datasets/<DATASET-ID>"

  /v1/evaluate:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Run LLM Evals
      operationId: evaluateLLM
      description: Run online evals for your test cases using the metrics in `metricCollection`.
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateRequest"
            examples:
              Single-Turn:
                metricCollection: "Collection Name"
                testCases:
                  input: "How tall is mount everest?"
                  actualOutput: "Not sure, pretty tall I guess?"
              Multi-Turn:
                metricCollection: "Collection Name"
                testCases:
                  - turns:
                      - role: user
                        content: "How tall is Mount Everest?"
                      - role: assistant
                        content: "Mount Everest is approximately 8,848 meters tall."
              Logging Parameters:
                metricCollection: "Collection Name"
                testCases:
                  input: "How tall is mount everest?"
                  actualOutput: "Not sure, pretty tall I guess?"
                hyperparameters:
                  model: "gpt-4o-mini"
                  prompt-version: "ai_generation_v2"
              Logging Identifier:
                metricCollection: "Collection Name"
                testCases:
                  input: "How tall is mount everest?"
                  actualOutput: "Not sure, pretty tall I guess?"
                identifier: "run-881-102"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false
                Multi-Turn:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false
                Logging Parameters:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false
                Logging Identifier:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false

  /v1/simulate:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Simulate Conversation
      operationId: simulateConversation
      description: Simulate conversations for your `goldens` along with existing turns.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulateRequest"
            examples:
              example1:
                summary: Basic simulation example
                value:
                  golden:
                    scenario: "A frustrated user asking for a refund."
                    userDescription: "A white male who is a customer for over 2 years."
                  existingTurns:
                    - role: "assistant"
                      content: "Hey, how can I help you today?"
      responses:
        "200":
          description: Successful Simulation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimulateResponse"
              examples:
                example1:
                  summary: Basic simulation example
                  value:
                    success: true
                    data:
                      simulationId: "SIMULATION-ID"
                      completed: false
                      userResponse: "I'd like my refund please."
                      turns:
                        - role: "assistant"
                          content: "Hey, how can I help you today?"
                        - role: "user"
                          content: "I'd like my refund please."

  /v1/evaluate/spans/{uuid}:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Evaluate Span
      operationId: evaluateSpan
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateSpanRequest"
            example:
              metricCollection: "Collection Name"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateSpanResponse"
              example:
                success: true
                data:
                  id: "SPAN-ID"
                deprecated: false

  /v1/evaluate/traces/{uuid}:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Evaluate Trace
      operationId: evaluateTrace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateTraceRequest"
            example:
              metricCollection: "Collection Name"
      responses:
        "200":
          description: Successful response from evaluate trace API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateTraceResponse"
              example:
                success: true
                data:
                  id: "TRACE-ID"
                deprecated: false

  /v1/evaluate/threads/{id}:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Evaluate Thread
      description: Triggers evaluation of a thread using a specified metric collection and optional chatbot role instructions.
      operationId: evaluateThread
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateThreadRequest"
            example:
              metricCollection: "Collection Name"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateThreadResponse"
              example:
                success: true
                data:
                  id: "THREAD-ID"
                deprecated: false

  /v1/traces:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Tracing
      summary: Trace Ingestion
      operationId: createTrace
      description: Adds a new trace to Confident AI with all the information your provide.
      requestBody:
        description: Create a trace ingestion
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/CreateTrace"

      responses:
        "200":
          description: Successful response from create trace API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTraceResponse"

  /v1/traces/{uuid}:
    put:
      x-fern-server-name: Confident AI
      tags:
        - Tracing
      summary: Update Trace
      operationId: updateTrace
      description: Updates a trace with the information your provide.
      requestBody:
        description: Create a trace ingestion
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UpdateTrace"

      responses:
        "200":
          description: Successful response from update trace API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTraceResponse"

components:
  schemas:
    CreateMetricCollection:
      type: object
      description: Request schema to create or update a metric collection
      properties:
        name:
          type: string
          description: This is the unique name of the metric collection you wish to create.
        multiTurn:
          type: boolean
          description: This is true if your metric collection is multi-turn, which contains only multi-turn metrics. Defaulted to `false`.
        metricSettings:
          type: array
          description: This is the list of metric settings for the collection.
          items:
            $ref: "#/components/schemas/MetricSetting"
      required:
        - name

    UpdateMetricCollection:
      type: object
      description: Request schema to create or update a metric collection
      properties:
        name:
          type: string
          description: The name of the metric collection, which must be unique within your project.
        multiTurn:
          type: boolean
          description: This is true if your metric collection is multi-turn, which contains only multi-turn metrics. Defaulted to `false`.
        metricSettings:
          type: array
          description: This is the list of metric settings for the collection.
          items:
            $ref: "#/components/schemas/MetricSetting"
      required:

    MetricSetting:
      type: object
      properties:
        metric:
          type: object
          description: This is a metric object, which contains the metric name.
          properties:
            name:
              type: string
              description: This is the name of the metric.
          required:
            - name
        activated:
          type: boolean
          description: "This determines if the metric is activated. Only activated metrics are used for evaluations. Non-activated metrics are skipped."
        threshold:
          type: number
          minimum: 0
          maximum: 1
          description: "This determines the threshold for the metric which determines if the metric passes or fails depending on if the metric score is above or below the threshold."
        includeReason:
          type: boolean
          description: "This determines if the reason for the metric score should be generated during evaluations."
        strictMode:
          type: boolean
          description: "This determines if the metric is in strict mode. Metrics in strict mode output a binary score of 0 or 1, indicating pass or fail, as opposed to a continuous score from 0 to 1."
    required:
      - metric

    CreateMetricResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the metric collection was created successfully."
        data:
          type: object
          description: "This maps to the id of the metric collection."
          properties:
            id:
              description: "This is the id of the metric collection."
              type: string
          required:
            - id
        deprecated:
          type: boolean
          description: "This is true if this metric collection endpoint is deprecated."
      required:
        - success
        - data
        - deprecated

    UpdateMetricCollectionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the metric collection was updated successfully."
        data:
          type: object
          description: "This maps to the id of the metric collection."
          properties:
            id:
              description: "This is the id of the metric collection."
              type: string
          required:
            - id
        deprecated:
          type: boolean
          description: "This is true if this metric collection endpoint is deprecated."
      required:
        - success
        - data
        - deprecated

    GetMetricCollectionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the list of metric collections was retrieved successfully."
        data:
          type: object
          description: "This maps to a list of metric collections, which can be used to [run evals](/api-reference/evaluation/evaluate-llm) remotely."
          properties:
            metricCollections:
              type: array
              description: "This is a list of metric collection objects."
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: "This is the id of the metric collection."
                  name:
                    type: string
                    description: "This is the name of the metric collection, which should be supplied to the [evals API](/api-reference/evaluation/evaluate-llm) to run evaluations remotely."
                  multiTurn:
                    type: boolean
                    description: "This is true if the metric collection is a multi-turn collection, which only contains multi-turn metrics for multi-turn evaluations."
                  metricSettings:
                    type: array
                    description: "This is a list of settings for each metric in the collection, which can be configured on [Confident AI's](https://confidentai.com) metric collection page."
                    items:
                      type: object
                      properties:
                        metric:
                          type: object
                          description: "This is a metric object, which contains the metric name."
                          properties:
                            name:
                              type: string
                              description: "This is the name of the metric."
                        activated:
                          type: boolean
                          description: "This is true if the metric is activated. Only activated metrics are used for evaluations. Non-activated metrics are skipped."
                        threshold:
                          type: number
                          minimum: 0
                          maximum: 1
                          description: "This is the threshold for the metric, which determines if the metric passes or fails depending on if the metric score is above or below the threshold."
                        includeReason:
                          type: boolean
                          description: "This is true if a metric's `include_reason` setting is toggled on the Confident platform. If true, the reason for the metric score will be generated during evaluations."
                        strictMode:
                          type: boolean
                          description: "This is true if the metric is in strict mode. Metrics in strict mode output a binary score of 0 or 1, indicating pass or fail, as opposed to a continuous score from 0 to 1."
                      required:
                        - metric
                        - activated
                        - threshold
                        - includeReason
                        - strictMode
                required:
                  - id
                  - name
                  - multiTurn
                  - metricSettings
          required:
            - metricCollections
      required:
        - success
        - data

    RetrievedGolden:
      type: object
      properties:
        input:
          type: string
          description: "This is the input to your LLM application."
        actualOutput:
          type: string
          nullable: true
          description: "This is the actual output of your LLM application."
        expectedOutput:
          type: string
          nullable: true
          description: "This is the expected output of your LLM application, which is the ideal actual output."
        retrievalContext:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the retrieval context of your LLM application."
        context:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the ideal retrieval context of your LLM application."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          nullable: true
          description: "This is the tools called by your LLM application."
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          nullable: true
          description: "This is the expected tools to be called by the LLM application."
        additionalMetadata:
          type: object
          nullable: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          nullable: true
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          nullable: true
          description: "This is the source file from which the golden was retrieved."
        customColumnKeyValues:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: "This is the custom column key values of the LLM application."
      required:
        - input

    RetrievedConversationalGolden:
      type: object
      properties:
        scenario:
          type: string
          description: "This is a description of the conversation context."
        userDescription:
          type: string
          nullable: true
          description: "This is the description of the user in the conversation."
        expectedOutcome:
          type: string
          nullable: true
          description: "This describes the expected outcome, or ideal conversation flow, of the conversation."
        turns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
          nullable: true
          description: "This is the list of turns in the conversation."
        context:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the context of the conversation."
        additionalMetadata:
          type: object
          nullable: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          nullable: true
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          nullable: true
          description: "This is the source file from which the golden was retrieved."
        customColumnKeyValues:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: "This is the custom column key values of the LLM application."
      required:
        - scenario

    Golden:
      type: object
      properties:
        input:
          type: string
          description: "This is the input to your LLM application."
        actualOutput:
          type: string
          nullable: true
          description: "This is the actual output of your LLM application."
        expectedOutput:
          type: string
          nullable: true
          description: "This is the expected output of your LLM application, which is the ideal actual output."
        retrievalContext:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the retrieval context of your LLM application."
        context:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the ideal retrieval context of your LLM application."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          nullable: true
          description: "This is the tools called by your LLM application."
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          nullable: true
          description: "This is the expected tools to be called by the LLM application."
        additionalMetadata:
          type: object
          nullable: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          nullable: true
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          nullable: true
          description: "This is the source file from which the golden was retrieved."
        finalized:
          type: boolean
          nullable: true
          description: "This determines whether the golden has been finalized."
      required:
        - input

    ConversationalGolden:
      type: object
      properties:
        scenario:
          type: string
          description: "This is a description of the conversation context."
        userDescription:
          type: string
          nullable: true
          description: "This is the description of the user in the conversation."
        expectedOutcome:
          type: string
          nullable: true
          description: "This describes the expected outcome, or ideal conversation flow, of the conversation."
        turns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
          nullable: true
          description: "This is the list of turns in the conversation."
        context:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the context of the conversation."
        additionalMetadata:
          type: object
          nullable: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          nullable: true
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          nullable: true
          description: "This is the source file from which the golden was retrieved."
        finalized:
          type: boolean
          nullable: true
          description: "This determines whether the golden has been finalized."
      required:
        - scenario

    Turn:
      type: object
      properties:
        role:
          type: string
          enum: ["user", "assistant"]
          description: "The role of the turn, either user or assistant."
        content:
          type: string
          description: "The message content of the turn."
        userId:
          type: string
          nullable: true
          description: "The user ID associated with the turn."
        retrievalContext:
          type: array
          items:
            type: string
          nullable: true
          description: "The contexts retrieved to generate the LLM response for this turn."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          nullable: true
          description: "The tools called to generate the LLM response for this turn."
      required:
        - role
        - content

    ToolCallData:
      type: object
      properties:
        name:
          type: string
          description: "This is the name of the tool."
        description:
          type: string
          nullable: true
          description: "This is the description of the tool."
        inputParameters:
          type: object
          additionalProperties: true
          nullable: true
          description: "This is the input parameters that are passed to the tool."
        output:
          type: any
          nullable: true
          description: "This is the output of the tool."
        reasoning:
          type: string
          nullable: true
          description: "This is the reasoning your LLM provided for the tool call."
      required:
        - name

    GetDatasetResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the dataset was successfully pulled."
        data:
          type: object
          properties:
            datasetId:
              type: string
            goldens:
              type: array
              description: "This is a List of `Goldens` if you are pulling a single-turn dataset, and `null` otherwise."
              nullable: true
              items:
                $ref: "#/components/schemas/RetrievedGolden"
            conversationalGoldens:
              type: array
              description: "This is a List of `ConversationalGoldens` if you are pulling a multi-turn dataset, and `null` otherwise."
              nullable: true
              items:
                $ref: "#/components/schemas/RetrievedConversationalGolden"
          required:
            - datasetId
      required:
        - success
        - data

    CreateDatasetRequestData:
      type: object
      properties:
        alias:
          type: string
          description: "This is the unique name of the dataset you want to push."
        overwrite:
          type: boolean
          description: "This determines whether to overwrite the existing dataset. If `false`, the goldens will be appended to the existing dataset, otherwise the existing dataset will be overwritten."
        goldens:
          type: array
          items:
            $ref: "#/components/schemas/Golden"
          nullable: true
          description: "This is a list of single-turn goldens to push. If you are pushing a multi-turn dataset, this should be `null`."
        conversationalGoldens:
          type: array
          items:
            $ref: "#/components/schemas/ConversationalGolden"
          nullable: true
          description: "This is a list of conversational goldens to push. If you are pushing a single-turn dataset, this should be `null`."
      required:
        - alias
        - overwrite

    CreateOrUpdateGoldenRequestData:
      type: object
      properties:
        link:
          type: string
          description: "This is the URL to the dataset you updated."
      required:
        - link

    LLMTestCase:
      type: object
      properties:
        input:
          type: string
          description: "This is the input to your LLM application."
        actualOutput:
          type: string
          nullable: true
          description: "This is the actual output of your LLM application."
        expectedOutput:
          type: string
          nullable: true
          description: "This is the expected output of your LLM application, which is the ideal actual output."
        retrievalContext:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the retrieval context of your LLM application."
        context:
          type: array
          items:
            type: string
          nullable: true
          description: "This is the ideal retrieval context of your LLM application."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          nullable: true
          description: "This is the tools called by your LLM application."
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          nullable: true
          description: "This is the expected tools to be called by the LLM application."
      required:
        - input
        - actualOutput

    ConversationalTestCase:
      type: object
      properties:
        turns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
          nullable: true
          description: "This is the list of turns in the conversation."
        scenario:
          type: string
          description: "This is a description of the conversation context."
        expectedOutcome:
          type: string
          nullable: true
          description: "This describes the expected outcome, or ideal conversation flow, of the conversation."
        userDescription:
          type: string
          nullable: true
          description: "This is the description of the user in the conversation."
        chatbotRole:
          type: string
          nullable: true
          description: "This is the role of the chatbot in the conversation."
      required:
        - turns

    EvaluateRequest:
      type: object
      properties:
        metricCollection:
          type: string
          description: "The name of the metric collection you wish to use for evaluation."
        testCases:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/LLMTestCase"
              - $ref: "#/components/schemas/ConversationalTestCase"
        hyperparameters:
          type: object
          description: "This is any hyperparameters like model or prompt you wish to associate with the test run."
          additionalProperties: true
        identifier:
          type: string
          description: "A unique identifier for the test run."
      required:
        - metricCollection
        - testCases

    EvaluateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the test cases were successfully evaluated."
        data:
          type: object
          properties:
            id:
              type: string
              description: "This is the unique ID for the test run. This ID is generated by Confident AI and is not to be confused with the identifier provided by the user."
        deprecated:
          type: boolean
          description: "This is true if this endpoint is deprecated."
      required:
        - success
        - data
        - deprecated

    SimulateRequest:
      type: object
      properties:
        golden:
          type: object
          properties:
            scenario:
              type: string
            userDescription:
              type: string
          required:
            - scenario
        existingTurns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
      required:
        - golden
        - existingTurns

    SimulateResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            simulationId:
              type: string
            completed:
              type: boolean
            userResponse:
              type: string
            turns:
              type: array
              items:
                $ref: "#/components/schemas/Turn"
    BaseSpan:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the span.
        name:
          type: string
        input:
          description: Input to the span.
        output:
          description: Output from the span.
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      required:
        - uuid
        - name
        - startTime
        - endTime

    LlmSpan:
      allOf:
        - $ref: "#/components/schemas/BaseSpan"
        - type: object
          properties:
            model:
              type: string
            costPerInputToken:
              type: number
              format: float
            costPerOutputToken:
              type: number
              format: float
            inputTokenCount:
              type: integer
            outputTokenCount:
              type: integer
          required:
            - model

    RetrieverSpan:
      allOf:
        - $ref: "#/components/schemas/BaseSpan"
        - type: object
          properties:
            embedder:
              type: string
            topK:
              type: integer
            chunkSize:
              type: integer
          required:
            - embedder

    ToolSpan:
      allOf:
        - $ref: "#/components/schemas/BaseSpan"
        - type: object
          properties:
            description:
              type: string

    AgentSpan:
      allOf:
        - $ref: "#/components/schemas/BaseSpan"
        - type: object
          properties:
            availableTools:
              type: array
              items:
                type: string
            agentHandoffs:
              type: array
              items:
                type: string

    ToolCall:
      type: object
      properties:
        name:
          type: string
        parameters:
          type: object
          additionalProperties: true

    Trace:
      type: object
      required:
        - uuid
        - startTime
        - endTime
      properties:
        uuid:
          type: string
          format: uuid
          description: The unique indentifier of the trace
        name:
          type: string
        input:
          description: Input to the trace
        output:
          description: Output from the trace
        startTime:
          type: string
          format: date-time
          description: Start time of the trace
        endTime:
          type: string
          format: date-time
          description: End time of the trace
        environment:
          type: string
          enum: [production, development, staging, testing]
          description: The environment of where your trace is from (helps with debugging)
        metadata:
          type: object
          additionalProperties: true
          description: Additional data of your trace
        tags:
          type: array
          items:
            type: string
          description: Tags of your trace
        baseSpans:
          type: array
          items:
            $ref: "#/components/schemas/BaseSpan"
        llmSpans:
          type: array
          items:
            $ref: "#/components/schemas/LlmSpan"
        retrieverSpans:
          type: array
          items:
            $ref: "#/components/schemas/RetrieverSpan"
        toolSpans:
          type: array
          items:
            $ref: "#/components/schemas/ToolSpan"
        agentSpans:
          type: array
          items:
            $ref: "#/components/schemas/AgentSpan"
        threadId:
          type: string
        userId:
          type: string
        metricCollection:
          type: string
        retrievalContext:
          type: array
          items:
            type: string
        context:
          type: array
          items:
            type: string
        expectedOutput:
          type: string
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCall"
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCall"

    CreateTrace:
      allOf:
        - $ref: "#/components/schemas/Trace"

    CreateTraceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: A boolean indicating the success or failure of the API call
        data:
          type: object
          properties:
            id:
              type: string
      required:
        - success
        - data

    UpdateTrace:
      type: object
      properties:
        output:
          description: Updated output for the trace
        endTime:
          type: string
          format: date-time
          description: Updated end time in ISO 8601 format
        metadata:
          type: object
          additionalProperties: true
          description: Arbitrary metadata to attach to the trace
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the trace

    UpdateTraceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: A boolean indicating the success or failure of the API call
      required:
        - success

    EvaluateThreadRequest:
      type: object
      required:
        - metricCollection
      properties:
        metricCollection:
          type: string
          description: This is the name of the multi-turn metric collection to evaluate the thread.
        chatbotRole:
          type: string
          description: The role or purpose of the chatbot in the thread.

    EvaluateThreadResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the thread was successfully evaluated.
        data:
          type: object
          properties:
            id:
              type: string
              description: This is the id of the thread generated by Confident AI, not to be confused with the thread id you supplied.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    EvaluateTraceRequest:
      type: object
      properties:
        metricCollection:
          type: string
          description: The name of the single-turn metric collection to evaluate the trace.
      required:
        - metricCollection

    EvaluateTraceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the trace was successfully evaluated.
        data:
          type: object
          properties:
            id:
              type: string
              description: This is the id of the trace, not to be confused with the UUID of the trace.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    EvaluateSpanRequest:
      type: object
      properties:
        metricCollection:
          type: string
          description: The name of the single-turn metric collection to evaluate the span.
      required:
        - metricCollection

    EvaluateSpanResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the span was successfully evaluated.
        data:
          type: object
          properties:
            id:
              type: string
              description: This is the id of the span, not to be confused with the UUID of the trace.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated
