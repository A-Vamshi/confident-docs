openapi: 3.1.0
info:
  title: Confident AI Metrics API
  version: 1.0.0

servers:
  - x-fern-server-name: Confident AI
    url: https://api.confident-ai.com/

tags:
  - name: Metric Collections
    description: Metric Collection API
    externalDocs:
      description: Learn about metric collection
  - name: Datasets
    description: Confident AI Datasets API
    externalDocs:
      description: Learn about datasets
  - name: Evaluation
    description: Run your evals using API
    externalDocs:
      description: Learn about evaluations
  - name: Tracing
    description: Run your evals using API
    externalDocs:
      description: Learn about tracing
  - name: Prompt
    description: Run your evals using API
    externalDocs:
      description: Learn about prompts

paths:
  /v1/metric-collections:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Metric Collections
      summary: Add Collection
      operationId: createMetricCollection
      description: Creates a metric collection with the `name` and the `metricSettings` you specified.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMetricCollection"
            examples:
              Single-Turn:
                name: "Collection Name"
                multiTurn: false
                metricSettings:
                  - metric:
                      name: Answer Relevancy
                    threshold: 0.8
              Multi-Turn:
                name: "Collection Name"
                multiTurn: true
                metricSettings:
                  - metric:
                      name: Turn Relevancy
                    threshold: 0.8
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMetricResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false
                Multi-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false

    get:
      x-fern-server-name: Confident AI
      tags:
        - Metric Collections
      summary: List Metric Collections
      operationId: listMetricCollections
      description: Lists all the available metric collections in your Confident AI project.
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMetricCollectionResponse"
              examples:
                GetMetricCollections:
                  success: true
                  data:
                    metricCollections:
                      - id: "COLLECTION-ID"
                        name: "Collection Name"
                        multiTurn: false
                        metricSettings:
                          - metric:
                              name: "Faithfulness"
                            activated: true
                            threshold: 0.5
                            includeReason: true
                            strictMode: false

  /v1/metric-collections/{id}:
    put:
      x-fern-server-name: Confident AI
      tags:
        - Metric Collections
      summary: Update Collection
      operationId: updateMetricCollection
      description: Updates a metric collection's `name` and `metricSettings`.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMetricCollection"
            examples:
              Single-Turn:
                name: "New Collection Name"
                multiTurn: false
                metricSettings:
                  - metric:
                      name: "Faithfulness"
                    threshold: 0.5
              Multi-Turn:
                name: "New Collection Name"
                multiTurn: true
                metricSettings:
                  - metric:
                      name: "Role Adherence"
                    threshold: 0.5
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMetricCollectionResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false
                Multi-Turn:
                  success: true
                  data:
                    id: "COLLECTION-ID"
                  deprecated: false

  /v1/datasets:
    get:
      x-fern-server-name: Confident AI
      tags:
        - Datasets
      summary: Pull Datasets
      operationId: getDatasetByAlias
      description: Retrieves a list of `Golden`s or `ConversationalGolden`s from your dataset.
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDatasetResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    datasetId: "DATASET-ID"
                    goldens:
                      - input: "How's the weather like in NYC?"
                        expectedOutput: "No idea"
                Multi-Turn:
                  success: true
                  data:
                    datasetId: "DATASET-ID"
                    conversationalGoldens:
                      - scenario: "Booking a hotel"
                        expectedOutcome: "Successfully booked"
                        userDescription: "Finds hotels in NYC"

    post:
      x-fern-server-name: Confident AI
      tags:
        - Datasets
      summary: Push Dataset
      operationId: pushDataset
      description: Pushes a list of `Golden`s or `ConversationalGolden`s to your dataset.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDatasetRequestData"
            examples:
              Single-Turn:
                alias: "my-dataset-alias"
                overwrite: true
                goldens:
                  - input: "How is the weather like in NYC?"
                    expectedOutput: "No idea"
              Multi-Turn:
                alias: "my-dataset-alias"
                overwrite: true
                conversationalGoldens:
                  - scenario: "Booking a hotel"
                    expectedOutcome: "Successfully booked"
                    userDescription: "Finds hotels in NYC"
              Custom-Columns:
                alias: "my-dataset-with-columns"
                overwrite: false
                goldens:
                  - input: "What is 2 + 2?"
                    customColumnKeyValues:
                      key: "value"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrUpdateGoldenRequestData"
              examples:
                Single-Turn:
                  link: "https://app.confident-ai.com/project/<PROJECT-ID>/datasets/<DATASET-ID>"
                Multi-Turn:
                  link: "https://app.confident-ai.com/project/<PROJECT-ID>/datasets/<DATASET-ID>"
                Custom-Columns:
                  link: "https://app.confident-ai.com/project/<PROJECT-ID>/datasets/<DATASET-ID>"

  /v1/evaluate:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Run LLM Evals
      operationId: evaluateLLM
      description: Run online evals for your test cases using the metrics in `metricCollection`.
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateRequest"
            examples:
              Single-Turn:
                metricCollection: "Collection Name"
                testCases:
                  - input: "How tall is mount everest?"
                    actualOutput: "No clue, pretty tall I guess?"
              Multi-Turn:
                metricCollection: "Multi-Turn Collection Name"
                testCases:
                  - turns:
                      - role: user
                        content: "How tall is Mount Everest?"
                      - role: assistant
                        content: "Mount Everest is approximately 8,848 meters tall."
                      - role: user
                        content: "Wow, that is really high! Has that changed recently?"
                      - role: assistant
                        content: "Yes, a 2020 survey by China and Nepal revised the height to 8,848.86 meters."
              Logging Parameters:
                metricCollection: "Collection Name"
                testCases:
                  input: "How tall is mount everest?"
                  actualOutput: "No clue, pretty tall I guess?"
                hyperparameters:
                  model: "gpt-40-mini"
                  prompt-version: "ai_generation_v2"
              Logging Identifier:
                metricCollection: "Collection Name"
                testCases:
                  input: "How tall is mount everest?"
                  actualOutput: "No clue, pretty tall I guess?"
                  name: "Your Test Case Name"
                identifier: "run-399-102"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateResponse"
              examples:
                Single-Turn:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false
                Multi-Turn:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false
                Logging Parameters:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false
                Logging Identifier:
                  success: true
                  data:
                    id: "TEST-RUN-ID"
                  deprecated: false

  /v1/simulate:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Simulate Conversation
      operationId: simulateConversation
      description: Simulate the next conversation turn from a conversational golden.
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulateRequest"
            examples:
              SimulationExample:
                golden:
                  scenario: "A frustrated user asking for a refund."
                  userDescription: "A white male who is a customer for over 2 years."
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimulateResponse"
              examples:
                SimulationExample:
                  success: true
                  data:
                    simulationId: "SIMULATION-ID"
                    completed: false
                    userResponse: "I'd like my refund please."
                    turns:
                      - role: "assistant"
                        content: "Hey, how can I help you today?"
                      - role: "user"
                        content: "I'd like my refund please."
                  deprecated: false

  /v1/evaluate/spans/{uuid}:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Evaluate Span
      operationId: evaluateSpan
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateSpanRequest"
            examples:
              EvaluateSpan:
                metricCollection: "Collection Name"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateSpanResponse"
              examples:
                EvaluateSpan:
                  success: true
                  data:
                    id: "SPAN-ID"
                  deprecated: false

  /v1/evaluate/traces/{uuid}:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Evaluate Trace
      operationId: evaluateTrace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateTraceRequest"
            examples:
              EvaluateTrace:
                metricCollection: "Collection Name"
      responses:
        "200":
          description: Successful response from evaluate trace API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateTraceResponse"
              examples:
                EvaluateTrace:
                  success: true
                  data:
                    id: "TRACE-ID"
                  deprecated: false

  /v1/evaluate/threads/{id}:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Evaluation
      summary: Evaluate Thread
      description: Triggers evaluation of a thread using a specified metric collection and optional chatbot role instructions.
      operationId: evaluateThread
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateThreadRequest"
            examples:
              EvaluateThread:
                metricCollection: "Collection Name"
                chatbotRole: "You are a rich, powerful..."
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateThreadResponse"
              examples:
                EvaluateThread:
                  success: true
                  data:
                    id: "THREAD-ID"
                  deprecated: false

  /v1/traces:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Tracing
      summary: Trace Ingestion
      operationId: createTrace
      description: Creates a new trace on Confident AI.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trace"
            examples:
              Base-Span:
                uuid: "<TRACE-UUID>"
                input: "What is the capital of France?"
                output: "The capital of France is Paris."
                startTime: "2025-01-15T10:30:00Z"
                endTime: "2025-01-15T10:30:05Z"
                baseSpans:
                  - uuid: "<SPAN-UUID>"
                    name: "Agent"
                    input: "What is the capital of France?"
                    output: "Let me look that up for you."
                    startTime: "2025-01-15T10:30:00Z"
                    endTime: "2025-01-15T10:30:02Z"
              LLM-Span:
                uuid: "<TRACE-UUID>"
                input: "What is the capital of France?"
                output: "The capital of France is Paris."
                startTime: "2025-01-15T10:30:00Z"
                endTime: "2025-01-15T10:30:05Z"
                llmSpans:
                  - uuid: "<SPAN-UUID>"
                    name: "OpenAI Call"
                    model: "gpt-4o"
                    input: "What is the capital of France?"
                    output: "The capital of France is Paris."
                    startTime: "2025-01-15T10:30:00Z"
                    endTime: "2025-01-15T10:30:02Z"
              Thread-Id:
                uuid: "<TRACE-UUID>"
                input: "What is the capital of France?"
                output: "The capital of France is Paris."
                startTime: "2025-01-15T10:30:00Z"
                endTime: "2025-01-15T10:30:05Z"
                threadId: "<THREAD-ID>"
                baseSpans:
                  - uuid: "<SPAN-UUID>"
                    name: "Agent"
                    input: "What is the capital of France?"
                    output: "Let me look that up for you."
                    startTime: "2025-01-15T10:30:00Z"
                    endTime: "2025-01-15T10:30:02Z"
              User-Id:
                uuid: "<TRACE-UUID>"
                input: "What is the capital of France?"
                output: "The capital of France is Paris."
                startTime: "2025-01-15T10:30:00Z"
                endTime: "2025-01-15T10:30:05Z"
                userId: "<USER-ID>"
                baseSpans:
                  - uuid: "<SPAN-UUID>"
                    name: "Agent"
                    input: "What is the capital of France?"
                    output: "Let me look that up for you."
                    startTime: "2025-01-15T10:30:00Z"
                    endTime: "2025-01-15T10:30:02Z"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTraceResponse"
              examples:
                Base-Span:
                  success: true
                  data:
                    id: "TRACE-ID"
                  link: "https://app.confident-ai.com/project/<PROJECT_ID>/observatory/traces/TRACE-ID"
                  deprecated: false
                LLM-Span:
                  success: true
                  data:
                    id: "TRACE-ID"
                  link: "https://app.confident-ai.com/project/<PROJECT_ID>/observatory/traces/TRACE-ID"
                  deprecated: false
                Thread-Id:
                  success: true
                  data:
                    id: "TRACE-ID"
                  link: "https://app.confident-ai.com/project/<PROJECT_ID>/observatory/traces/TRACE-ID"
                  deprecated: false
                User-Id:
                  success: true
                  data:
                    id: "TRACE-ID"
                  link: "https://app.confident-ai.com/project/<PROJECT_ID>/observatory/traces/TRACE-ID"
                  deprecated: false
              example:
                success: true
                data:
                  id: "TRACE-ID"
                link: "https://app.confident-ai.com/project/<PROJECT_ID>/observatory/traces/TRACE-ID"
                deprecated: false
    get:
      x-fern-server-name: Confident AI
      tags:
        - Tracing
      summary: List Traces
      operationId: getTrace
      description: Retrieves a list of traces from your Confident AI project.
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTraceResponse"

  /v1/traces/{uuid}:
    put:
      x-fern-server-name: Confident AI
      tags:
        - Tracing
      summary: Update Trace
      operationId: updateTrace
      description: Updates an existing trace on your Confident AI project.
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrace"
            examples:
              example1:
                output: "The capital of France is Rome"
                endTime: "2025-01-16T10:30:05Z"
                metadata:
                  ip_address: "127.0.0.1"
                tags:
                  - "General QA"

      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTraceResponse"
              examples:
                example1:
                  success: true
                  data:
                    id: "TRACE-ID"
                  deprecated: false

  /v1/prompts:
    get:
      x-fern-server-name: Confident AI
      tags:
        - Prompt
      summary: Pull Prompts
      operationId: getPrompt
      description: Retrieves a prompt with `promptVersionId` and `interpolationType` from your Confident AI account.
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPromptResponse"
              examples:
                Text-Prompt:
                  success: true
                  data:
                    promptVersionId: "prv_abc123"
                    text: "Hello, {{name}}!"
                    type: "TEXT"
                    interpolationType: "FSTRING"
                  deprecated: false
                List-Prompt:
                  success: true
                  data:
                    promptVersionId: "prvl_def456"
                    messages:
                      - role: user
                        content: "What is the weather like in {{city}}?"
                    type: "LIST"
                    interpolationType: "FSTRING"
                  deprecated: false
    post:
      x-fern-server-name: Confident AI
      tags:
        - Prompt
      summary: Push Prompts
      operationId: pushPrompt
      description: Creates a new prompt on your Confident AI project.
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePromptRequest"
            examples:
              Text-Prompt:
                alias: "Prompt Name"
                text: "Hello, {{name}}!"
                interpolationType: "FSTRING"
              List-Prompt:
                alias: "Prompt Name"
                messages:
                  - role: user
                    content: "What is the weather like in {{city}}?"
                interpolationType: "FSTRING"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePromptResponse"
              examples:
                Text-Prompt:
                  success: true
                  data:
                    id: "prm_xyz456"
                  link: "https://app.confident-ai.com/project/<PROJECT_ID>/prompt-studio/editor/prm_xyz456"
                  deprecated: false
                List-Prompt:
                  success: true
                  data:
                    id: "prm_xyz456"
                  link: "https://app.confident-ai.com/project/<PROJECT_ID>/prompt-studio/editor/prm_xyz456"
                  deprecated: false

  /v1/annotation:
    post:
      x-fern-server-name: Confident AI
      tags:
        - Annotations
      summary: Create Annotation
      operationId: createAnnotation
      description: Dummy create annotation endpoint to surface in docs.
      parameters:
        - in: header
          name: CONFIDENT_API_KEY
          required: true
          description: The API key of your Confident AI project.
          schema:
            type: string
          example: "<PROJECT-API-KEY>"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAnnotation"
            examples:
              Thumbs Rating:
                traceUuid: "<TRACE-UUID>"
                rating: 1
                type: "THUMBS_RATING"
                expectedOutput: "Provide a clear, step-by-step password reset flow."
                explanation: "Response acknowledges issue and guides the user through reset steps."
              Five Star Rating:
                spanUuid: "<SPAN-UUID>"
                rating: 5
                type: "FIVE_STAR_RATING"
                expectedOutput: "Include verification, link to reset page, and confirmation messaging."
                explanation: "High-quality answer with actionable steps and safety considerations."
              Thread Annotation:
                threadId: "<THREAD-ID>"
                rating: 1
                type: "THUMBS_RATING"
                expectedOutcome: "Agent confirms identity and successfully walks the user through a reset."
                explanation: "User should be guided to reset their password successfully, which did "
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAnnotationResponse"
              examples:
                Thumbs Rating:
                  success: true
                  data:
                    id: "ANNOTATION-ID"
                  deprecated: false
                Five Star Rating:
                  success: true
                  data:
                    id: "ANNOTATION-ID"
                  deprecated: false
                Thread Annotation:
                  success: true
                  data:
                    id: "ANNOTATION-ID"
                  deprecated: false

components:
  schemas:
    CreateMetricCollection:
      type: object
      description: Request schema to create or update a metric collection
      properties:
        name:
          type: string
          description: This is the unique name of the metric collection you wish to create.
        multiTurn:
          type: boolean
          description: This is true if your metric collection is multi-turn, which contains only multi-turn metrics. Defaulted to `false`.
        metricSettings:
          type: array
          description: This is the list of metric settings for the collection.
          items:
            $ref: "#/components/schemas/MetricSetting"
      required:
        - name

    UpdateMetricCollection:
      type: object
      description: Request schema to create or update a metric collection
      properties:
        name:
          type: string
          description: The name of the metric collection, which must be unique within your project.
        multiTurn:
          type: boolean
          description: This is true if your metric collection is multi-turn, which contains only multi-turn metrics. Defaulted to `false`.
        metricSettings:
          type: array
          description: This is the list of metric settings for the collection.
          items:
            $ref: "#/components/schemas/MetricSetting"
      required:

    MetricSetting:
      type: object
      properties:
        metric:
          type: object
          description: This is a metric object, which contains the metric name.
          properties:
            name:
              type: string
              description: This is the name of the metric.
          required:
            - name
        activated:
          type: boolean
          description: "This determines if the metric is activated. Only activated metrics are used for evaluations. Non-activated metrics are skipped."
        threshold:
          type: number
          minimum: 0
          maximum: 1
          description: "This determines the threshold for the metric which determines if the metric passes or fails depending on if the metric score is above or below the threshold."
        includeReason:
          type: boolean
          description: "This determines if the reason for the metric score should be generated during evaluations."
        strictMode:
          type: boolean
          description: "This determines if the metric is in strict mode. Metrics in strict mode output a binary score of 0 or 1, indicating pass or fail, as opposed to a continuous score from 0 to 1."
    required:
      - metric

    CreateMetricResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the metric collection was created successfully."
        data:
          type: object
          description: "This maps to the id of the metric collection."
          properties:
            id:
              description: "This is the id of the metric collection."
              type: string
          required:
            - id
        deprecated:
          type: boolean
          description: "This is true if this metric collection endpoint is deprecated."
      required:
        - success
        - data
        - deprecated

    UpdateMetricCollectionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the metric collection was updated successfully."
        data:
          type: object
          description: "This maps to the id of the metric collection."
          properties:
            id:
              description: "This is the id of the metric collection."
              type: string
          required:
            - id
        deprecated:
          type: boolean
          description: "This is true if this metric collection endpoint is deprecated."
      required:
        - success
        - data
        - deprecated

    GetMetricCollectionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the list of metric collections was retrieved successfully."
        data:
          type: object
          description: "This maps to a list of metric collections, which can be used to [run evals](/api-reference/evaluation/evaluate-llm) remotely."
          properties:
            metricCollections:
              type: array
              description: "This is a list of metric collection objects."
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: "This is the id of the metric collection."
                  name:
                    type: string
                    description: "This is the name of the metric collection, which should be supplied to the [evals API](/api-reference/evaluation/evaluate-llm) to run evaluations remotely."
                  multiTurn:
                    type: boolean
                    description: "This is true if the metric collection is a multi-turn collection, which only contains multi-turn metrics for multi-turn evaluations."
                  metricSettings:
                    type: array
                    description: "This is a list of settings for each metric in the collection, which can be configured on [Confident AI's](https://confidentai.com) metric collection page."
                    items:
                      type: object
                      properties:
                        metric:
                          type: object
                          description: "This is a metric object, which contains the metric name."
                          properties:
                            name:
                              type: string
                              description: "This is the name of the metric."
                        activated:
                          type: boolean
                          description: "This is true if the metric is activated. Only activated metrics are used for evaluations. Non-activated metrics are skipped."
                        threshold:
                          type: number
                          minimum: 0
                          maximum: 1
                          description: "This is the threshold for the metric, which determines if the metric passes or fails depending on if the metric score is above or below the threshold."
                        includeReason:
                          type: boolean
                          description: "This is true if a metric's `include_reason` setting is toggled on the Confident platform. If true, the reason for the metric score will be generated during evaluations."
                        strictMode:
                          type: boolean
                          description: "This is true if the metric is in strict mode. Metrics in strict mode output a binary score of 0 or 1, indicating pass or fail, as opposed to a continuous score from 0 to 1."
                      required:
                        - metric
                        - activated
                        - threshold
                        - includeReason
                        - strictMode
                required:
                  - id
                  - name
                  - multiTurn
                  - metricSettings
          required:
            - metricCollections
      required:
        - success
        - data

    RetrievedGolden:
      type: object
      properties:
        input:
          type: string
          description: "This is the input to your LLM application."
        actualOutput:
          type: string
          description: "This is the actual output of your LLM application."
        expectedOutput:
          type: string
          description: "This is the expected output of your LLM application, which is the ideal actual output."
        retrievalContext:
          type: array
          items:
            type: string
          description: "This is the retrieval context of your LLM application."
        context:
          type: array
          items:
            type: string
          description: "This is the ideal retrieval context of your LLM application."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: "This is the tools called by your LLM application."
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: "This is the expected tools to be called by the LLM application."
        additionalMetadata:
          type: object
          additionalProperties: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          description: "This is the source file from which the golden was retrieved."
        customColumnKeyValues:
          type: object
          additionalProperties: true
          description: "This is the custom column key values of the LLM application."
      required:
        - input

    RetrievedConversationalGolden:
      type: object
      properties:
        scenario:
          type: string
          description: "This is a description of the conversation context."
        userDescription:
          type: string
          description: "This is the description of the user in the conversation."
        expectedOutcome:
          type: string
          description: "This describes the expected outcome, or ideal conversation flow, of the conversation."
        turns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
          description: "This is the list of turns in the conversation."
        context:
          type: array
          items:
            type: string
          description: "This is the context of the conversation."
        additionalMetadata:
          type: object
          additionalProperties: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          description: "This is the source file from which the golden was retrieved."
        customColumnKeyValues:
          type: object
          additionalProperties: true
          description: "This is the custom column key values of the LLM application."
      required:
        - scenario

    Golden:
      type: object
      properties:
        input:
          type: string
          description: "This is the input to your LLM application."
        actualOutput:
          type: string
          description: "This is the actual output of your LLM application."
        expectedOutput:
          type: string
          description: "This is the expected output of your LLM application, which is the ideal actual output."
        retrievalContext:
          type: array
          items:
            type: string
          description: "This is the retrieval context of your LLM application."
        context:
          type: array
          items:
            type: string
          description: "This is the ideal retrieval context of your LLM application."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: "This is the tools called by your LLM application."
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: "This is the expected tools to be called by the LLM application."
        additionalMetadata:
          type: object
          additionalProperties: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          description: "This is the source file from which the golden was retrieved."
        finalized:
          type: boolean
          description: "This determines whether the golden has been finalized."
        customColumnKeyValues:
          type: object
          additionalProperties: true
          description: "Key-value pairs representing custom table column data for this golden. Keys correspond to the custom column keys defined in the dataset."
      required:
        - input

    ConversationalGolden:
      type: object
      properties:
        scenario:
          type: string
          description: "This is a description of the conversation context."
        userDescription:
          type: string
          description: "This is the description of the user in the conversation."
        expectedOutcome:
          type: string
          description: "This describes the expected outcome, or ideal conversation flow, of the conversation."
        turns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
          description: "This is the list of turns in the conversation."
        context:
          type: array
          items:
            type: string
          description: "This is the context of the conversation."
        additionalMetadata:
          type: object
          additionalProperties: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          description: "This is any comments you wish to associate with the golden."
        sourceFile:
          type: string
          description: "This is the source file from which the golden was retrieved."
        finalized:
          type: boolean
          description: "This determines whether the golden has been finalized."
        customColumnKeyValues:
          type: object
          additionalProperties: true
          description: "Key-value pairs representing custom table column data for this golden. Keys correspond to the custom column keys defined in the dataset."
      required:
        - scenario

    SimulationConversationalGolden:
      type: object
      properties:
        scenario:
          type: string
          description: "This is a description of the conversation context."
        userDescription:
          type: string
          description: "This is the description of the user in the conversation."
        expectedOutcome:
          type: string
          description: "This describes the expected outcome, or ideal conversation flow, of the conversation."
        turns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
          description: "This is the list of turns in the conversation."
        context:
          type: array
          items:
            type: string
          description: "This is the context of the conversation."
        additionalMetadata:
          type: object
          additionalProperties: true
          description: "This is any additional metadata you wish to associate with the golden."
        comments:
          type: string
          description: "This is any comments you wish to associate with the golden."
        name:
          type: string
          description: "This is the name of the golden."
        customColumnKeyValues:
          type: object
          additionalProperties: true
          description: "Key-value pairs representing custom table column data for this golden. Keys correspond to the custom column keys defined in the dataset."
      required:
        - scenario

    Turn:
      type: object
      properties:
        role:
          type: string
          enum: ["user", "assistant"]
          description: "The role of the turn, either user or assistant."
        content:
          type: string
          description: "The message content of the turn."
        userId:
          type: string
          description: "The user ID associated with the turn."
        retrievalContext:
          type: array
          items:
            type: string
          description: "The contexts retrieved to generate the LLM response for this turn."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: "The tools called to generate the LLM response for this turn."
      required:
        - role
        - content

    ToolCallData:
      type: object
      properties:
        name:
          type: string
          description: "This is the name of the tool."
        description:
          type: string
          description: "This is the description of the tool."
        inputParameters:
          type: object
          additionalProperties: true
          description: "This is the input parameters that are passed to the tool."
        output:
          type: string
          description: "This is the output of the tool."
        reasoning:
          type: string
          description: "This is the reasoning your LLM provided for the tool call."
      required:
        - name

    GetDatasetResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the dataset was successfully pulled."
        data:
          oneOf:
            - type: object
              properties:
                datasetId:
                  type: string
                goldens:
                  type: array
                  items:
                    $ref: "#/components/schemas/Golden"
              required:
                - datasetId
                - goldens
            - type: object
              properties:
                datasetId:
                  type: string
                conversationalGoldens:
                  type: array
                  items:
                    $ref: "#/components/schemas/ConversationalGolden"
              required:
                - datasetId
                - conversationalGoldens
      required:
        - success
        - data

    CreateDatasetRequestData:
      type: object
      properties:
        alias:
          type: string
          description: "This is the unique name of the dataset you want to push."
        overwrite:
          type: boolean
          description: "This determines whether to overwrite the existing dataset. If `false`, the goldens will be appended to the existing dataset, otherwise the existing dataset will be overwritten."
        goldens:
          type: array
          items:
            $ref: "#/components/schemas/Golden"
          description: "This is a list of single-turn goldens to push. If you are pushing a multi-turn dataset, this should be `null`."
        conversationalGoldens:
          type: array
          items:
            $ref: "#/components/schemas/ConversationalGolden"
          description: "This is a list of conversational goldens to push. If you are pushing a single-turn dataset, this should be `null`."
      required:
        - alias
        - overwrite

    CreateOrUpdateGoldenRequestData:
      type: object
      properties:
        link:
          type: string
          description: "This is the URL to the dataset you updated."
      required:
        - link

    LLMTestCase:
      type: object
      properties:
        input:
          type: string
          description: "This is the input to your LLM application."
        actualOutput:
          type: string
          description: "This is the actual output of your LLM application."
        name:
          type: string
          description: "This is the name of your test case, it allows you to search and match test cases across different test runs."
        expectedOutput:
          type: string
          description: "This is the expected output of your LLM application, which is the ideal actual output."
        retrievalContext:
          type: array
          items:
            type: string
          description: "This is the retrieval context of your LLM application."
        context:
          type: array
          items:
            type: string
          description: "This is the ideal retrieval context of your LLM application."
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: "This is the tools called by your LLM application."
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: "This is the expected tools to be called by the LLM application."
      required:
        - input
        - actualOutput

    ConversationalTestCase:
      type: object
      properties:
        turns:
          type: array
          items:
            $ref: "#/components/schemas/Turn"
          description: "This is the list of turns in the conversation."
        scenario:
          type: string
          description: "This is a description of the conversation context."
        name:
          type: string
          description: "This is the name of your test case, it allows you to search and match test cases across different test runs."
        expectedOutcome:
          type: string
          description: "This describes the expected outcome, or ideal conversation flow, of the conversation."
        userDescription:
          type: string
          description: "This is the description of the user in the conversation."
        chatbotRole:
          type: string
          description: "This is the role of the chatbot in the conversation."
      required:
        - turns

    EvaluateRequest:
      type: object
      properties:
        metricCollection:
          type: string
          description: "The name of the metric collection you wish to use for evaluation."
        testCases:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/LLMTestCase"
              - $ref: "#/components/schemas/ConversationalTestCase"
        hyperparameters:
          type: object
          additionalProperties: true
          description: "This is any hyperparameters like model or prompt you wish to associate with the test run."
        identifier:
          type: string
          description: "A unique identifier for the test run."
      required:
        - metricCollection
        - testCases

    EvaluateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the test cases were successfully evaluated."
        data:
          type: object
          properties:
            id:
              type: string
              description: "This is the unique ID for the test run. This ID is generated by Confident AI and is not to be confused with the identifier provided by the user."
        deprecated:
          type: boolean
          description: "This is true if this endpoint is deprecated."
      required:
        - success
        - data
        - deprecated

    SimulateRequest:
      type: object
      properties:
        golden:
          $ref: "#/components/schemas/ConversationalGolden"
      required:
        - golden

    SimulateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "This is true if the next turn in the conversation was successfully simulated."
        data:
          type: object
          properties:
            simulationId:
              type: string
              description: "This is the unique ID for the simulation."
            completed:
              type: boolean
              description: "This is true if the conversation is complete, which means the expected outcome has been reached."
            userResponse:
              type: string
              description: "This is the simulated user response of the last turn in the conversation."
            turns:
              type: array
              items:
                $ref: "#/components/schemas/Turn"
              description: "This is the list of all the turns in the conversation."
        deprecated:
          type: boolean
          description: "This is true if this endpoint is deprecated."
      required:
        - success
        - data
        - deprecated

    BaseSpan:
      type: object
      properties:
        uuid:
          type: string
          description: This is the unique identifier of the span.
        name:
          type: string
          description: This is the name of the span.
        input:
          type: string
          description: This is the input to the span.
        output:
          type: string
          description: This is the output of the span.
        error:
          type: string
          description: This is the error message, if an error occurred inside the span.
        status:
          type: string
          enum: [SUCCESS, ERRORED]
          description: This represents the error status of the span.
        startTime:
          type: string
          format: date-time
          description: This is the time the span started.
        endTime:
          type: string
          format: date-time
          description: This is the time the span ended.
        parentUuid:
          type: string
          format: uuid
          description: This is the unique identifier of the span's parent span.
        metadata:
          type: object
          additionalProperties: true
          description: This is any additional metadata associated with the span.
        metricCollection:
          type: string
          description: This is the metric collection to be used for evaluating the span.
        type:
          type: string
          description: This is a string that represents the type of span.
        retrievalContext:
          type: array
          items:
            type: string
          description: This is the retrieval context of your span, which is to be used for evaluation.
        context:
          type: array
          items:
            type: string
          description: This is the ideal retrieval context of your span, which is to be used for evaluation.
        expectedOutput:
          type: string
          description: This is the expected output of your span, which is the ideal actual output and to be used for evaluation.
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the tools called by your span, which is to be used for evaluation.
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the expected tools to be called by the span, which is to be used for evaluation.
      required:
        - uuid
        - name
        - startTime
        - endTime

    LlmSpan:
      type: object
      properties:
        uuid:
          type: string
          description: This is the unique identifier of the span.
        name:
          type: string
          description: This is the name of the span.
        input:
          type: string
          description: This is the input to the span.
        output:
          type: string
          description: This is the output of the span.
        error:
          type: string
          description: This is the error message, if an error occurred inside the span.
        status:
          type: string
          enum: [SUCCESS, ERRORED]
          description: This represents the error status of the span.
        startTime:
          type: string
          format: date-time
          description: This is the time the span started.
        endTime:
          type: string
          format: date-time
          description: This is the time the span ended.
        parentUuid:
          type: string
          format: uuid
          description: This is the unique identifier of the span's parent span.
        metadata:
          type: object
          additionalProperties: true
          description: This is any additional metadata associated with the span.
        metricCollection:
          type: string
          description: This is the metric collection to be used for evaluating the span.
        type:
          type: string
          description: This is a string that represents the type of span.
        retrievalContext:
          type: array
          items:
            type: string
          description: This is the retrieval context of your span, which is to be used for evaluation.
        context:
          type: array
          items:
            type: string
          description: This is the ideal retrieval context of your span, which is to be used for evaluation.
        expectedOutput:
          type: string
          description: This is the expected output of your span, which is the ideal actual output and to be used for evaluation.
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the tools called by your span, which is to be used for evaluation.
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the expected tools to be called by the span, which is to be used for evaluation.
        model:
          type: string
          description: This is the LLM model used in the span.
        costPerInputToken:
          type: number
          format: float
          description: This is the cost per input token of the LLM model.
        costPerOutputToken:
          type: number
          format: float
          description: This is the cost per output token of the LLM model.
        inputTokenCount:
          type: integer
          description: This is the number of input tokens passed to the LLM model.
        outputTokenCount:
          type: integer
          description: This is the number of output tokens generated by the LLM model.
      required:
        - model

    RetrieverSpan:
      type: object
      properties:
        uuid:
          type: string
          description: This is the unique identifier of the span.
        name:
          type: string
          description: This is the name of the span.
        input:
          type: string
          description: This is the input to the span.
        output:
          type: string
          description: This is the output of the span.
        error:
          type: string
          description: This is the error message, if an error occurred inside the span.
        status:
          type: string
          enum: [SUCCESS, ERRORED]
          description: This represents the error status of the span.
        startTime:
          type: string
          format: date-time
          description: This is the time the span started.
        endTime:
          type: string
          format: date-time
          description: This is the time the span ended.
        parentUuid:
          type: string
          format: uuid
          description: This is the unique identifier of the span's parent span.
        metadata:
          type: object
          additionalProperties: true
          description: This is any additional metadata associated with the span.
        metricCollection:
          type: string
          description: This is the metric collection to be used for evaluating the span.
        type:
          type: string
          description: This is a string that represents the type of span.
        retrievalContext:
          type: array
          items:
            type: string
          description: This is the retrieval context of your span, which is to be used for evaluation.
        context:
          type: array
          items:
            type: string
          description: This is the ideal retrieval context of your span, which is to be used for evaluation.
        expectedOutput:
          type: string
          description: This is the expected output of your span, which is the ideal actual output and to be used for evaluation.
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the tools called by your span, which is to be used for evaluation.
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the expected tools to be called by the span, which is to be used for evaluation.
        embedder:
          type: string
          description: This is the embedder model used in the span.
        topK:
          type: integer
          description: This is the top K chunks retrieved from your knowledge base.
        chunkSize:
          type: integer
          description: This is the chunk size of each retrieved context.
      required:
        - embedder

    ToolSpan:
      type: object
      properties:
        uuid:
          type: string
          description: This is the unique identifier of the span.
        name:
          type: string
          description: This is the name of the span.
        input:
          type: string
          description: This is the input to the span.
        output:
          type: string
          description: This is the output of the span.
        error:
          type: string
          description: This is the error message, if an error occurred inside the span.
        status:
          type: string
          enum: [SUCCESS, ERRORED]
          description: This represents the error status of the span.
        startTime:
          type: string
          format: date-time
          description: This is the time the span started.
        endTime:
          type: string
          format: date-time
          description: This is the time the span ended.
        parentUuid:
          type: string
          format: uuid
          description: This is the unique identifier of the span's parent span.
        metadata:
          type: object
          additionalProperties: true
          description: This is any additional metadata associated with the span.
        metricCollection:
          type: string
          description: This is the metric collection to be used for evaluating the span.
        type:
          type: string
          description: This is a string that represents the type of span.
        retrievalContext:
          type: array
          items:
            type: string
          description: This is the retrieval context of your span, which is to be used for evaluation.
        context:
          type: array
          items:
            type: string
          description: This is the ideal retrieval context of your span, which is to be used for evaluation.
        expectedOutput:
          type: string
          description: This is the expected output of your span, which is the ideal actual output and to be used for evaluation.
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the tools called by your span, which is to be used for evaluation.
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the expected tools to be called by the span, which is to be used for evaluation.
        description:
          type: string
          description: This is the description of the tool used in the span.

    AgentSpan:
      type: object
      properties:
        uuid:
          type: string
          description: This is the unique identifier of the span.
        name:
          type: string
          description: This is the name of the span.
        input:
          type: string
          description: This is the input to the span.
        output:
          type: string
          description: This is the output of the span.
        error:
          type: string
          description: This is the error message, if an error occurred inside the span.
        status:
          type: string
          enum: [SUCCESS, ERRORED]
          description: This represents the error status of the span.
        startTime:
          type: string
          format: date-time
          description: This is the time the span started.
        endTime:
          type: string
          format: date-time
          description: This is the time the span ended.
        parentUuid:
          type: string
          format: uuid
          description: This is the unique identifier of the span's parent span.
        metadata:
          type: object
          additionalProperties: true
          description: This is any additional metadata associated with the span.
        metricCollection:
          type: string
          description: This is the metric collection to be used for evaluating the span.
        type:
          type: string
          description: This is a string that represents the type of span.
        retrievalContext:
          type: array
          items:
            type: string
          description: This is the retrieval context of your span, which is to be used for evaluation.
        context:
          type: array
          items:
            type: string
          description: This is the ideal retrieval context of your span, which is to be used for evaluation.
        expectedOutput:
          type: string
          description: This is the expected output of your span, which is the ideal actual output and to be used for evaluation.
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the tools called by your span, which is to be used for evaluation.
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the expected tools to be called by the span, which is to be used for evaluation.
        availableTools:
          type: array
          description: This is the list of names of available tools to be used in the span.
          items:
            type: string
        agentHandoffs:
          type: array
          description: This is the list of potential agent handoffs in the span.
          items:
            type: string

    Trace:
      type: object
      required:
        - uuid
        - startTime
        - endTime
      properties:
        uuid:
          type: string
          description: This is the unique identifier of the trace.
        name:
          type: string
          description: This is the name of the trace.
        input:
          type: string
          description: This is the input to the trace.
        output:
          type: string
          description: This is the output of the trace.
        startTime:
          type: string
          format: date-time
          description: This is the time the trace started.
        endTime:
          type: string
          format: date-time
          description: This is the time the trace ended.
        environment:
          type: string
          enum: [production, development, staging, testing]
          description: This is the environment where your trace was posted, which helps with separating and debugging traces from different environments on the Confident AI platform.
        metadata:
          type: object
          additionalProperties: true
          description: This is any additional metadata associated with the trace.
        tags:
          type: array
          items:
            type: string
          description: This is any tags associated with the trace, which helps with grouping traces and filtering them on the Confident AI platform.
        baseSpans:
          type: array
          description: This is the list of base spans associated with the trace.
          items:
            $ref: "#/components/schemas/BaseSpan"
        llmSpans:
          type: array
          description: This is the list of LLM spans associated with the trace.
          items:
            $ref: "#/components/schemas/LlmSpan"
        retrieverSpans:
          type: array
          description: This is the list of retriever spans associated with the trace.
          items:
            $ref: "#/components/schemas/RetrieverSpan"
        toolSpans:
          type: array
          description: This is the list of tool spans associated with the trace.
          items:
            $ref: "#/components/schemas/ToolSpan"
        agentSpans:
          type: array
          description: This is the list of agent spans associated with the trace.
          items:
            $ref: "#/components/schemas/AgentSpan"
        threadId:
          type: string
          description: This is the unique identifier of the thread associated with the trace.
        userId:
          type: string
          description: This is the unique identifier for your end user for the trace.
        metricCollection:
          type: string
          description: This is the metric collection you wish to use to evaluate the trace.
        retrievalContext:
          type: array
          items:
            type: string
          description: This is the retrieval context of your trace, which is to be used for evaluation.
        context:
          type: array
          items:
            type: string
          description: This is the ideal retrieval context of your trace, which is to be used for evaluation.
        expectedOutput:
          type: string
          description: This is the expected output of your trace, which is the ideal actual output and to be used for evaluation.
        toolsCalled:
          type: array
          description: This is the tools called by your trace, which is to be used for evaluation.
          items:
            $ref: "#/components/schemas/ToolCallData"
        expectedTools:
          type: array
          description: This is the expected tools to be called by the trace, which is to be used for evaluation.
          items:
            $ref: "#/components/schemas/ToolCallData"

    CreateTraceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: A boolean indicating the success or failure of the API call
        data:
          type: object
          description: This maps to the trace id.
          properties:
            id:
              type: string
              description: This is the uuid of the trace.
        link:
          type: string
          description: This is the URL to the trace on the Confident AI platform.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated
        - link

    UpdateTrace:
      type: object
      properties:
        input:
          type: string
          description: This is the input to the trace.
        output:
          type: string
          description: This is the output of the trace.
        endTime:
          type: string
          format: date-time
          description: This is the time the trace ended.
        name:
          type: string
          description: This is the name of the trace.
        environment:
          type: string
          enum: [production, development, staging, testing]
          description: This is the environment where your trace was posted, which helps with separating and debugging traces from different environments on the Confident AI platform.
        metadata:
          type: object
          additionalProperties: true
          description: This is any additional metadata associated with the trace.
        tags:
          type: array
          description: This is any tags associated with the trace, which helps with grouping traces and filtering them on the Confident AI platform.
          items:
            type: string
        baseSpans:
          type: array
          description: This is the list of base spans associated with the trace.
          items:
            $ref: "#/components/schemas/BaseSpan"
        llmSpans:
          type: array
          description: This is the list of LLM spans associated with the trace.
          items:
            $ref: "#/components/schemas/LlmSpan"
        retrieverSpans:
          type: array
          description: This is the list of retriever spans associated with the trace.
          items:
            $ref: "#/components/schemas/RetrieverSpan"
        toolSpans:
          type: array
          description: This is the list of tool spans associated with the trace.
          items:
            $ref: "#/components/schemas/ToolSpan"
        agentSpans:
          type: array
          description: This is the list of agent spans associated with the trace.
          items:
            $ref: "#/components/schemas/AgentSpan"

    UpdateTraceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: A boolean indicating the success or failure of the API call
        data:
          type: object
          properties:
            id:
              type: string
              description: This is the uuid of the trace.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    EvaluateThreadRequest:
      type: object
      properties:
        metricCollection:
          type: string
          description: This is the name of the multi-turn metric collection to evaluate the thread.
        chatbotRole:
          type: string
          description: The role or purpose of the chatbot in the thread.
      required:
        - metricCollection

    EvaluateThreadResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the thread was successfully evaluated.
        data:
          type: object
          properties:
            id:
              type: string
              description: This is the id of the thread generated by Confident AI, not to be confused with the thread id you supplied.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    EvaluateTraceRequest:
      type: object
      properties:
        metricCollection:
          type: string
          description: The name of the single-turn metric collection to evaluate the trace.
      required:
        - metricCollection

    EvaluateTraceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the trace was successfully evaluated.
        data:
          type: object
          properties:
            id:
              type: string
              description: This is the id of the trace, not to be confused with the UUID of the trace.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    EvaluateSpanRequest:
      type: object
      properties:
        metricCollection:
          type: string
          description: The name of the metric collection to use
      required:
        - metricCollection

    EvaluateSpanResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the span was successfully evaluated.
        data:
          type: object
          properties:
            id:
              type: string
              description: This is the id of the span, not to be confused with the UUID of the trace.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    CreatePromptRequest:
      type: object
      properties:
        alias:
          type: string
          description: The unique alias of the prompt.
        text:
          type: string
          description: The text content of the prompt. Supply this only if you are creating a text-based prompt.
        messages:
          type: array
          items:
            $ref: "#/components/schemas/PromptMessage"
          description: The list of messages that make up the prompt. Supply this only if you are creating a list-based prompt.
        interpolationType:
          type: string
          enum: [FSTRING, HANDLEBARS]
          default: FSTRING
          description: The type of interpolation format used in the prompt to insert dynamic variables, which can be either f-string or handlebars.
      required:
        - alias

    PromptMessage:
      type: object
      properties:
        role:
          type: string
          description: The role of the message, which can be user, assistant, system, or developer.
        content:
          type: string
          description: The text content of the message.
      required:
        - role
        - content

    GetPromptResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the prompt was successfully retrieved.
        data:
          type: object
          properties:
            promptVersionId:
              description: This is the id of the prompt version generated by Confident AI, not to be confused with the alias you supplied or version number.
              type: string
            text:
              description: This is the text content of the prompt, which is null if the prompt is a list prompt.
              type: string
            messages:
              description: This is the list of messages associated with the prompt, which is null if the prompt is a text prompt.
              type: array
              items:
                $ref: "#/components/schemas/PromptMessage"
            type:
              description: This is the type of the prompt, which can be either simple text or a list of messages.
              type: string
              enum: [TEXT, LIST]
            interpolationType:
              description: This is the type of interpolation format used in the prompt to insert dynamic variables, which can be either f-string or handlebars.
              type: string
              enum: [FSTRING, HANDLEBARS]
          required:
            - promptVersionId
            - type
            - interpolationType
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    CreatePromptResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the prompt was successfully created.
        data:
          type: object
          description: This maps to the prompt version id.
          properties:
            id:
              type: string
              description: This is the id of the prompt version generated by Confident AI, not to be confused with the alias you supplied or version number.
          required:
            - id
        link:
          type: string
          description: This is the URL to redirect to after the prompt is created.
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - link
        - deprecated

    Annotation:
      type: object
      properties:
        id:
          type: string
          description: This is the id of the annotation generated by Confident AI, not to be confused with the alias you supplied or version number.
        rating:
          type: integer
          description: This is the annotated rating score.
        type:
          type: enum
          enum: [THUMBS_RATING, FIVE_STAR_RATING]
          description: This is the type of annotation, which can be either thumbs rating or five star rating.
        expectedOutcome:
          type: string
          description: This is the annotated expected outcome, for conversation annotations.
        expectedOutput:
          type: string
          description: This is the annotated expected output, for span and trace annotations.
        explanation:
          type: string
          description: This is the explanation for the annotation.
        created_at:
          type: string
          description: This is when the annotation was created.
        flagged:
          type: boolean
          description: This determines if the annotation is flagged.
        projectId:
          type: string
          description: This is the project id where the annotation lives.
        spanUuid:
          type: string
          description: This is the span uuid where the annotation is associated.
        traceUuid:
          type: string
          description: This is the trace uuid where the annotation is associated.
        threadId:
          type: string
          description: This is the thread id where the annotation is associated.
        userId:
          type: string
          description: This is the user id where the annotation is associated.
      required:
        - id
        - rating
        - type
        - created_at
        - flagged
        - projectId

    CreateAnnotation:
      type: object
      description: Request schema to create an annotation for a trace, span, or thread.
      properties:
        traceUuid:
          type: string
          description: This is the trace UUID to annotate. Exactly one of traceUuid, spanUuid, or threadId must be provided.
        spanUuid:
          type: string
          description: This is the span UUID to annotate. Exactly one of traceUuid, spanUuid, or threadId must be provided.
        threadId:
          type: string
          description: This is the thread ID to annotate. Exactly one of traceUuid, spanUuid, or threadId must be provided.
        rating:
          type: number
          description: This is the annotated rating score, which must be 0 or 1 if the annotation is a thumb rating and an integer from 1 to 5 if the annotation is a five star rating.
        type:
          type: string
          enum: [THUMBS_RATING, FIVE_STAR_RATING]
          default: THUMBS_RATING
          description: This is the annotation typem which defaults to THUMBS_RATING.
        expectedOutput:
          type: string
          description: This is the expected output for trace/span annotations, which mustn't be provided when annotating a thread.
        expectedOutcome:
          type: string
          description: This is the expected outcome for thread annotations, which mustn't be provided when annotating a trace or span.
        explanation:
          type: string
          description: This is an explanation for the annotation.
      required:
        - rating

    CreateAnnotationResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the annotation was successfully created.
        data:
          type: object
          description: This maps to the id of the created annotation.
          properties:
            id:
              type: string
              description: This is the id of the created annotation.
          required:
            - id
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    GetTraceResponse:
      type: object
      properties:
        success:
          type: boolean
          description: This is true if the traces were successfully retrieved.
        data:
          type: object
          description: This maps to the list of traces retrieved.
          properties:
            traces:
              type: array
              description: This is the list of traces retrieved.
              items:
                $ref: "#/components/schemas/GetTrace"
            totalTraces:
              type: integer
              description: This is the total number of traces retrieved.
          required:
            - traces
            - totalTraces
        deprecated:
          type: boolean
          description: This is true if this endpoint is deprecated.
      required:
        - success
        - data
        - deprecated

    GetTrace:
      type: object
      properties:
        id:
          type: string
          description: This is the id of the trace generated by Confident AI, not to be confused with the uuid of the trace.
        input:
          additionalProperties: true
          description: This is the input to the trace.
        output:
          additionalProperties: true
          description: This is the output of the trace.
        created_at:
          type: string
          format: date-time
          description: This is the time the trace was created.
        ended_at:
          type: string
          format: date-time
          description: This is the time the trace ended.
        name:
          type: string
          description: This is the name of the trace.
        uuid:
          type: string
          format: uuid
          description: This is the uuid of the trace, not to be confused with the trace id.
        environment:
          type: string
          enum: [production, development, staging, testing]
          description: This is the environment where the trace was created.
        threadId:
          type: string
          description: This is the thread id of the trace, which groups traces in the same thread into a conversation.
        testCaseId:
          type: string
          description: This is the test case id of the trace, which is only set if the trace was created in a testing environment.
        endUserId:
          type: string
          description: This is the user id you provided for this trace.
        projectId:
          type: string
          description: This is the id of the project where the trace lives.
        metricCollectionName:
          type: string
          description: This is the name of the metric collection assigned to evaluate the trace.
        retrievalContext:
          type: array
          description: This is the retrieval context associated with the trace, to be used for evaluations.
          items:
            type: string
        context:
          type: array
          description: This is the ideal retrieval context associated with the trace, to be used for evaluations.
          items:
            type: string
        expectedOutput:
          type: array
          description: This is the expected output associated with the trace, to be used for evaluations.
          items:
            $ref: "#/components/schemas/ToolCallData"
        expectedTools:
          type: array
          description: This is the list of expected tools associated with the trace, to be used for evaluations.
          items:
            $ref: "#/components/schemas/ToolCallData"
        metricsData:
          type: array
          description: This is the list of metrics data associated with the trace after running evaluations.
          items:
            $ref: "#/components/schemas/MetricsData"
        annotation:
          $ref: "#/components/schemas/Annotation"
          description: This is the text annotation for the trace.
        tags:
          type: array
          items:
            type: string
          description: This is the list of tags associated with the trace, which is useful for grouping and filtering for traces.
        metadataValues:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                description: This is the key of the metadata key-value pair.
              value:
                type: string
                description: This is the value of the metadata key-value pair.
          description: This is the list of any metadata key-value pairs associated with the trace.
        spans:
          type: array
          items:
            $ref: "#/components/schemas/GetSpan"
          description: This is the list of spans in the trace.
      required:
        - id
        - uuid
        - created_at
        - ended_at
        - projectId
        - spans
        - metadataValues
        - tags

    MetricsData:
      type: object
      properties:
        id:
          type: string
          description: The id of the metrics data.
        score:
          type: number
          description: This is the final metric score.
        reason:
          type: string
          description: This is the reason for the metric score, which is generated by the evaluation model at evaluation time.
        projectId:
          type: string
          description: This is the id of the project where the metric lives.
        success:
          type: boolean
          description: This is true if the metric score is above the threshold.
        created_at:
          type: string
          format: date-time
          description: This is the time the metric was created.
        evaluated_at:
          type: string
          format: date-time
          description: This is the time the metric was evaluated.
        threshold:
          type: number
          format: float
          description: This is the threshold for the metric, which determines if the metric is passing or failing depending on if the metric score is above or below the threshold.
        evaluationModel:
          type: string
          description: This is the evaluation model used to run the evaluation.
        strictMode:
          type: boolean
          description: This is true if the metric was run in strict mode, which outputs a binary score of 0 or 1.
        error:
          type: string
          description: This is the error message if the evaluation failed.
        evaluationCost:
          type: number
          format: float
          description: This is the cost of running the evaluation.
        name:
          type: string
          description: This is the name of the metric.
        verboseLogs:
          type: string
          description: This is the verbose logs of the evaluation, which breaks down the metric score calculation into individual steps.
        conversationalTestCaseId:
          type: string
          description: This is the id of the conversational test case associated with the metric.
        spanUuid:
          type: string
          description: This is the uuid of the span associated with the metric.
        traceUuid:
          type: string
          description: This is the uuid of the trace associated with the metric.
        testCaseId:
          type: string
          description: This is the id of the test case associated with the metric.
        testRunId:
          type: string
          description: This is the id of the test run associated with the metric.
        threadId:
          type: string
          description: This is the id of the thread associated with the metric.
      required:
        - id
        - projectId
        - created_at
        - threshold
        - name

    GetSpan:
      type: object
      properties:
        id:
          type: string
          description: This is the id of the span generated by Confident AI, not to be confused with the uuid of the span.
        uuid:
          type: string
          format: uuid
          description: This is the uuid of the span, not to be confused with the span id.
        name:
          type: string
          description: This is the name of the span.
        input:
          description: This is the input to the span.
        output:
          description: This is the output of the span.
        error:
          type: string
          description: This is the error string that caused the span to fail, if an error occurred.
        parentUuid:
          type: string
          description: This is the uuid of the parent span, if any.
        startTime:
          type: string
          format: date-time
          description: This is the time the span started.
        endTime:
          type: string
          format: date-time
          description: This is the time the span ended.
        traceUuid:
          type: string
          description: This is the uuid of the trace containing the span.
        agentHandoffs:
          type: array
          items: string
          description: This is the list of agent handoffs associated with an agent span.
        availableTools:
          type: array
          items: string
          description: This is the list of available tools associated with an agent span.
        chunkSize:
          type: integer
          description: This is the chunk size of each retrieved context for a retriever span.
        costPerInputToken:
          type: number
          format: float
          description: This is the cost per input token of the LLM model for an LLM span.
        costPerOutputToken:
          type: number
          format: float
          description: This is the cost per output token of the LLM model for an LLM span.
        description:
          type: string
          description: This is a description if the span is a tool span.
        embedder:
          type: string
          description: This is the embedder model used in a retriever span.
        inputTokenCost:
          type: number
          format: float
          description: This is the total cost of the input tokens passed to the LLM model in an LLM span.
        inputTokenCount:
          type: integer
          description: This is the total number of input tokens passed to the LLM model in an LLM span.
        model:
          type: string
          description: This is the LLM model used in an LLM span.
        outputTokenCost:
          type: number
          format: float
          description: This is the total cost of the output tokens generated by the LLM model in an LLM span.
        outputTokenCount:
          type: integer
          description: This is the total number of output tokens generated by the LLM model in an LLM span.
        status:
          type: string
          enum: [SUCCESS, FAILED, PENDING]
          description: This is the error status of the span.
        topK:
          type: integer
          description: This is the top K chunks retrieved from your knowledge base.
        type:
          type: string
          description: This is the type of the span.
        metricCollectionName:
          type: string
          description: This is the name of the metric collection to evaluate the span.
        retrievalContext:
          type: array
          items:
            type: string
          description: This is the retrieval context of your span, which is to be used for evaluation.
        context:
          type: array
          items:
            type: string
          description: This is the ideal retrieval context of your span, which is to be used for evaluation.
        expectedOutput:
          type: string
          description: This is the expected output of your span, which is the ideal actual output and to be used for evaluation.
        toolsCalled:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the tools called by your span, which is to be used for evaluation.
        expectedTools:
          type: array
          items:
            $ref: "#/components/schemas/ToolCallData"
          description: This is the expected tools to be called by the span, which is to be used for evaluation.
        metricsData:
          type: array
          items:
            $ref: "#/components/schemas/MetricsData"
          description: This is the metrics data associated with the span.
        annotation:
          $ref: "#/components/schemas/Annotation"
          description: This is the text annotation for the span.
        environment:
          type: string
          enum: [production, development, staging, testing]
          description: This is the environment where your span was posted, which helps with separating and debugging spans from different environments on the Confident AI platform.
        metadataValues:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                description: This is the key of the metadata key-value pair.
              value:
                type: string
                description: This is the value of the metadata key-value pair.
          description: This is the list of any metadata key-value pairs associated with the span.
      required:
        - id
        - uuid
        - name
        - startTime
        - endTime
        - traceUuid
        - status
        - type
